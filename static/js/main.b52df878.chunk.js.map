{"version":3,"sources":["routes/AuthProvider.tsx","pages/Home/Ref/Hello.jsx","pages/Home/Ref/index.jsx","pages/Home/index.tsx","utils/index.ts","pages/GraphQL/index.jsx","pages/About/index.tsx","pages/Login/index.tsx","pages/Gallery/List.tsx","pages/Gallery/ImageView.tsx","pages/Gallery/ImageModal.tsx","pages/Gallery/index.tsx","routes/PrivateRoute.tsx","routes/index.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["initialContext","user","signIn","cb","signOut","AuthContext","createContext","useAuth","useContext","AuthProvider","children","auth","useAuthProvider","Provider","value","fakeAuth","isAuthenticated","setTimeout","useState","setUser","SayHello","props","ref","visible","setVisible","useImperativeHandle","onClick","forwardRef","RefDemo","handleClick","child","onRef","this","Hello","React","Component","Home","history","useHistory","Ref","push","Log","str","process","EXCHANGE_RATES","gql","ExchangeComp","useQuery","data","error","loading","rates","map","i","currency","rate","errorLink","onError","graphqlErrors","networkError","message","locations","path","statusCode","status","window","location","href","localStorage","removeItem","link","ApolloLink","from","client","ApolloClient","uri","cache","InMemoryCache","GraphQL","About","Login","useLocation","state","pathname","replace","IMAGES","id","title","color","List","to","background","style","width","height","ImageView","useParams","image","parseInt","Modals","goBack","className","Index","url","useRouteMatch","component","GalleryList","ImageModal","PrivateRoute","rest","render","Routes","exact","Gallery","App","basename","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b52df878.chunk.js","sourcesContent":["/** @format */\n\nimport React, {createContext, useContext, useState} from 'react'\n\ninterface FakeAuthType {\n    isAuthenticated: boolean\n    signIn: (cb: () => void) => void\n    signOut: (cb: () => void) => void\n}\n\nexport interface ContextType {\n    user: string | null\n    signIn: (cb: () => void) => void\n    signOut: (cb: () => void) => void\n}\n\nconst initialContext: ContextType = {\n    user: null,\n    signIn: cb => {\n        cb()\n    },\n    signOut: cb => {\n        cb()\n    },\n}\n\nconst AuthContext = createContext(initialContext)\n\nexport const useAuth = (): ContextType => {\n    return useContext(AuthContext)\n}\n\nexport const AuthProvider = ({children}: {children: JSX.Element}): JSX.Element => {\n    const auth = useAuthProvider()\n    return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>\n}\n\nconst fakeAuth: FakeAuthType = {\n    isAuthenticated: false,\n    signIn: cb => {\n        fakeAuth.isAuthenticated = true\n        setTimeout(cb, 100)\n    },\n    signOut: cb => {\n        fakeAuth.isAuthenticated = false\n        setTimeout(cb, 100)\n    },\n}\n\nconst useAuthProvider = () => {\n    const [user, setUser] = useState<null | string>(null)\n\n    const signIn = (cb: () => void): void => {\n        return fakeAuth.signIn(() => {\n            setUser('user')\n            cb()\n        })\n    }\n    const signOut = (cb: () => void): void => {\n        return fakeAuth.signOut(() => {\n            setUser(null)\n            cb()\n        })\n    }\n    return {\n        user,\n        signIn,\n        signOut,\n    }\n}\n","import { useState, useImperativeHandle, forwardRef } from 'react'\n\nconst SayHello = (props, ref) => {\n    const [ visible, setVisible ] = useState(false)\n    // 将子组件暴露出来的对象挂载到 child\n    useImperativeHandle(ref, () => {\n        return {\n            setVisible\n        }\n    })\n    return visible && (\n        <h1 onClick={() => setVisible(false)}>Hello world</h1>\n    )\n}\n\nexport default forwardRef(SayHello)\n","/** @format */\n\nimport React, {Fragment} from 'react'\nimport Hello from './Hello'\nclass RefDemo extends React.Component {\n    handleClick = () => {\n        if (this.child) {\n            this.child.setVisible(true)\n        }\n    }\n    onRef = ref => {\n        // 将子组件暴露出来的对象挂载到 child\n        this.child = ref\n    }\n    render() {\n        return (\n            <Fragment>\n                <button onClick={this.handleClick}>say Hello</button>\n                <Hello ref={this.onRef} />\n            </Fragment>\n        )\n    }\n}\n\nexport default RefDemo\n","/** @format */\n\nimport React, {Fragment} from 'react'\nimport {useHistory} from 'react-router-dom'\nimport Ref from './Ref'\n\nconst Home = (): JSX.Element => {\n    const history = useHistory()\n    return (\n        <Fragment>\n            <div>home</div>\n            <Ref />\n            <button onClick={() => history.push('/about')}>About</button>\n            <button onClick={() => history.push('/login')}>Login</button>\n            <button onClick={() => history.push('/gallery')}>Gallery</button>\n        </Fragment>\n    )\n}\nexport default Home\n","/** @format */\n\nexport const Log = (str?: string): void => {\n    if (process.env.NODE_ENV !== 'production') {\n        console.log(str)\n    }\n}\n","/** @format */\n\nimport React from 'react'\nimport {ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql, ApolloLink} from '@apollo/client'\n// Error Handling\n// to catch and handle server errors, network errors, and GraphQL errors.\nimport {onError} from '@apollo/client/link/error'\nimport {Log} from '../../utils'\n\nconst EXCHANGE_RATES = gql`\n    query GetExchangeRates {\n        rates(currency: \"USD\") {\n            currency\n            rate\n        }\n    }\n`\n\nconst ExchangeComp = props => {\n    const {data, error, loading} = useQuery(EXCHANGE_RATES)\n    if (loading) return <p>loading....</p>\n    if (error) return <p>Error....</p>\n    return (data?.rates || []).map(i => (\n        <div key={i.currency}>\n            <p>\n                {i.currency}: {i.rate}\n            </p>\n        </div>\n    ))\n}\n\nconst errorLink = onError(({graphqlErrors, networkError}) => {\n    if (graphqlErrors) {\n        graphqlErrors.map(({message, locations, path}) =>\n            Log(`\n            [Graphql error]: Message: ${message}, Location: ${locations}, Path: ${path}\n        `),\n        )\n    }\n    if (networkError) {\n        Log('Status', networkError.statusCode)\n        const status = networkError.statusCode\n        if (status === 302) {\n            // 重定向\n            window.location.href = 'redirect_path'\n        }\n        if (status === 403) {\n            // 登录\n            localStorage.removeItem('access_token')\n            window.location.href = `/login`\n        } else if (status === 503 && process.env.NODE_ENV === 'production') {\n            Log('服务器报错')\n        } else {\n            Log(`[Network error]: ${networkError}`)\n        }\n    }\n})\n\nconst link = ApolloLink.from([errorLink])\n\nconst client = new ApolloClient({\n    uri: 'https://48p1r2roz4.sse.codesandbox.io', //后端接口地址\n    cache: new InMemoryCache(),\n    link,\n})\n\nconst GraphQL = () => {\n    return (\n        <ApolloProvider client={client}>\n            <ExchangeComp />\n        </ApolloProvider>\n    )\n}\nexport default GraphQL\n","/** @format */\n\nimport React from 'react'\n\nconst About = (): JSX.Element => {\n    return <div>hello, i'm about page</div>\n}\n\nexport default About\n","/** @format */\n\nimport React from 'react'\nimport {useHistory, useLocation} from 'react-router-dom'\nimport {useAuth, ContextType} from '../../routes/AuthProvider'\nconst Login = (): JSX.Element => {\n    const history = useHistory()\n    const location = useLocation<{from: {pathname: string}}>()\n    const auth: ContextType = useAuth()\n\n    const from = location.state?.from || {pathname: '/'}\n    const handleLoginClick = () => {\n        auth.signIn(() => {\n            history.replace(from)\n        })\n    }\n    return <button onClick={handleLoginClick}>Login</button>\n}\n\nexport default Login\n","/** @format */\n\nimport React, {Fragment} from 'react'\nimport {Link, useLocation} from 'react-router-dom'\n\nexport const IMAGES = [\n    {id: 0, title: 'Dark Orchid', color: 'DarkOrchid'},\n    {id: 1, title: 'Lime Green', color: 'LimeGreen'},\n    {id: 2, title: 'Tomato', color: 'Tomato'},\n    {id: 3, title: 'Seven Ate Nine', color: '#789'},\n    {id: 4, title: 'Crimson', color: 'Crimson'},\n]\nconst List = (): JSX.Element => {\n    const location = useLocation()\n    return (\n        <Fragment>\n            {IMAGES.map(i => (\n                <Link\n                    key={i.id}\n                    to={{\n                        pathname: `/gallery/img/${i.id}`,\n                        state: {\n                            background: location,\n                        },\n                    }}>\n                    <div\n                        style={{\n                            width: '50px',\n                            height: '50px',\n                            background: i.color,\n                        }}\n                    />\n                    <p>{i.title}</p>\n                </Link>\n            ))}\n        </Fragment>\n    )\n}\n\nexport default List\n","/** @format */\n\nimport React, {Fragment} from 'react'\nimport {useParams} from 'react-router-dom'\nimport {IMAGES} from './List'\n\nconst ImageView = (): JSX.Element => {\n    const {id}: {id: string} = useParams()\n    const image = IMAGES[parseInt(id, 10)]\n    if (!image) {\n        return <div>No Image found</div>\n    }\n    return (\n        <Fragment>\n            <h1>{image.title}</h1>\n            <div\n                style={{\n                    width: '100%',\n                    height: '400px',\n                    background: image.color,\n                }}\n            />\n        </Fragment>\n    )\n}\n\nexport default ImageView\n","/** @format */\n\nimport React from 'react'\nimport {useParams, useHistory} from 'react-router-dom'\nimport {IMAGES} from './List'\nimport './ImageModal.scss'\n\nconst Modals = (): JSX.Element | null => {\n    const history: any = useHistory()\n    const {id}: {id: string} = useParams()\n    const image = IMAGES[parseInt(id, 10)]\n\n    const goBack = () => {\n        history.goBack()\n    }\n\n    if (!image) {\n        return null\n    }\n    return (\n        <div className=\"imageModal\" onClick={goBack}>\n            <div className=\"imageModal-content\">\n                <h1>{image.title}</h1>\n                <div\n                    style={{\n                        width: '100%',\n                        height: '400px',\n                        background: image.color,\n                    }}\n                />\n                <button onClick={goBack}>Close</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Modals\n","/** @format */\n\nimport React from 'react'\nimport {Switch, Route, Link, useLocation, useRouteMatch} from 'react-router-dom'\nimport GalleryList from './List'\nimport ImageView from './ImageView'\nimport ImageModal from './ImageModal'\n\nconst Index = (): JSX.Element => {\n    const location: any = useLocation()\n    const {url}: {url: string} = useRouteMatch()\n    const background = location.state?.background\n\n    return (\n        <div>\n            <Link to={`${url}/list`}>Visit the Gallery</Link>\n            <h2>Feature Images</h2>\n            <ul>\n                <li>\n                    <Link to={`${url}/img/2`}>Tomato</Link>\n                </li>\n                <li>\n                    <Link to={`${url}/img/4`}>Crimson</Link>\n                </li>\n            </ul>\n            <Switch location={background || location}>\n                <Route path={`${url}/list`} component={GalleryList} />\n                <Route path={`${url}/img/:id`} component={ImageView} />\n            </Switch>\n            {background && <Route path={`/gallery/img/:id`} component={ImageModal} />}\n        </div>\n    )\n}\n\nexport default Index\n","/** @format */\n\nimport React from 'react'\nimport {Route, Redirect} from 'react-router-dom'\nimport {useAuth, ContextType} from './AuthProvider'\n\ntype PrivateRouteType = {\n    component: () => JSX.Element\n    path: string\n}\n\nconst PrivateRoute = ({component: Component, ...rest}: PrivateRouteType): JSX.Element => {\n    const auth: ContextType = useAuth()\n    return (\n        <Route\n            {...rest}\n            render={({location}) => {\n                if (auth.user) {\n                    return <Component />\n                }\n                return <Redirect to={{pathname: '/login', state: {from: location}}} />\n            }}\n        />\n    )\n}\n\nexport default PrivateRoute\n","/** @format */\n\nimport React from 'react'\nimport {Switch, Route} from 'react-router-dom'\nimport Home from '../pages/Home'\nimport GraphQL from '../pages/GraphQL'\nimport About from '../pages/About'\nimport Login from '../pages/Login'\nimport Gallery from '../pages/Gallery'\nimport PrivateRoute from './PrivateRoute'\n\nconst Routes = (): JSX.Element => {\n    return (\n        <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/graphql\" component={GraphQL} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/gallery\" component={Gallery} />\n            <PrivateRoute path=\"/about\" component={About} />\n        </Switch>\n    )\n}\n\nexport default Routes\n","/** @format */\n\nimport React from 'react'\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport {AuthProvider} from './routes/AuthProvider'\nimport Routes from './routes'\n\nconst App = (): JSX.Element => {\n    return (\n        <AuthProvider>\n            <Router basename={process.env.PUBLIC_URL}>\n                <Routes />\n            </Router>\n        </AuthProvider>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/** @format */\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root') as HTMLElement,\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}